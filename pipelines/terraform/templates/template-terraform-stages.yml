parameters:
  - name: environmentName
    type: string
  - name: serviceconnectionName
    type: string
  - name: terraformBasePath
    type: string
    default: '$(System.DefaultWorkingDirectory)/Terraform'

stages:
  - stage: Plan_${{ parameters.environmentName }}
    dependsOn: []
    variables:
    - template: './template-variables.yml'
    - template: './template-variables-${{ parameters.environmentName }}.yml'
    - name: 'terraformBasePath'
      value: '${{ parameters.terraformBasePath }}'
    displayName: 'tf plan ${{ parameters.environmentName }}'
    jobs:
      - job: TerraformPlan
        displayName: 'Create Terraform Plan'
        steps:
        - checkout: self
          displayName: 'Checkout repository'

        - task: TerraformInstaller@1
          displayName: 'Install Terraform $(TF_VERSION)'
          inputs:
            terraformVersion: '$(TF_VERSION)'

        - task: TerraformTaskV4@4
          displayName: 'Initialize Terraform'
          inputs:
            provider: 'azurerm'
            command: 'init'
            commandOptions: '-upgrade'
            workingDirectory: '$(terraformBasePath)/'
            # ensureBackend: true
            backendServiceArm: '${{ parameters.serviceconnectionName }}'
            backendAzureRmResourceGroupName: '$(TF_BACKEND_RG_NAME)'
            backendAzureRmStorageAccountName: '$(TF_BACKEND_SA_NAME)'
            backendAzureRmContainerName: '$(TF_BACKEND_CONTAINER_NAME)'
            backendAzureRmKey: '$(TF_BACKEND_STATE_FILE_NAME)'
        
        - task: AzureCLI@2
          displayName: 'Tarkista olemassa oleva Web App'
          inputs:
            azureSubscription: '${{ parameters.serviceconnectionName }}'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            workingDirectory: '$(terraformBasePath)'
            inlineScript: |
              # Tarkistetaan onko webappia olemassa, jos on, tuodaan se Terraform-tilaan
              az webapp show --name $(WEB_APP_NAME) --resource-group $(TF_BACKEND_RG_NAME) || echo "Web App not found, will be created by Terraform"
        
        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs: 
            # addSpnToEnvironment: true
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(terraformBasePath)'
            environmentServiceNameAzureRM: '${{ parameters.serviceconnectionName }}'
            commandOptions: '-out $(terraformBasePath)/$(Build.BuildId)-${{parameters.environmentName}}.tfplan'

        - task: ArchiveFiles@2
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(terraformBasePath)'
            archiveType: 'tar'
            archiveFile: '$(Build.ArtifactStagingDirectory)/terraform-plan.tgz'
            includeRootFolder: false
            verbose: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact available to apply stage'  
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: '$(Build.BuildId)-tfplan'
            publishLocation: 'Container'     

  - stage: TerraformApply_${{ parameters.environmentName }}
    dependsOn: Plan_${{ parameters.environmentName }}
    variables:
    - template: './template-variables.yml'
    - template: './template-variables-${{ parameters.environmentName }}.yml'
    - name: 'terraformBasePath'
      value: '${{ parameters.terraformBasePath }}'
    displayName: 'tf apply ${{ parameters.environmentName }}'
    jobs:
      - job: TerraformApply
        displayName: 'Apply Terraform Plan'
        steps:
        - checkout: self
          displayName: 'Checkout repository'

        - task: DownloadBuildArtifacts@1
          displayName: 'Download terraformplan from current build'
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            itemPattern: '$(Build.BuildId)-tfplan/terraform-plan.tgz'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: ExtractFiles@1
          displayName: 'Extract files'
          inputs:
            archiveFilePatterns: '$(System.ArtifactsDirectory)/$(Build.BuildId)-tfplan/terraform-plan.tgz'
            destinationFolder: '$(terraformBasePath)'
            cleanDestinationFolder: false
            overwriteExistingFiles: true
            
        - task: TerraformInstaller@1
          displayName: 'Install Terraform $(TF_VERSION)'
          inputs:
            terraformVersion: '$(TF_VERSION)'

        - task: TerraformTaskV4@4
          displayName: 'Initialize Terraform'
          inputs:
            provider: 'azurerm'
            command: 'init'
            commandOptions: -upgrade
            workingDirectory: '$(terraformBasePath)'
            # ensureBackend: true
            backendServiceArm: '${{ parameters.serviceconnectionName }}'
            backendAzureRmResourceGroupName: '$(TF_BACKEND_RG_NAME)'
            backendAzureRmStorageAccountName: '$(TF_BACKEND_SA_NAME)'
            backendAzureRmContainerName: '$(TF_BACKEND_CONTAINER_NAME)'
            backendAzureRmKey: '$(TF_BACKEND_STATE_FILE_NAME)'

        - task: TerraformTaskV4@4
          displayName: 'Apply Plan'
          inputs:
            command: 'apply'
            workingDirectory: '$(terraformBasePath)'
            environmentServiceNameAzureRM: '${{ parameters.serviceconnectionName }}'
            commandOptions: '-auto-approve -input=false $(Build.BuildId)-${{parameters.environmentName}}.tfplan'
            arguments: ${{ parameters.environmentName }}
            addSpnToEnvironment: true
            failOnStandardError: true

  - stage: DeployWebApp_${{ parameters.environmentName }}
    dependsOn: TerraformApply_${{ parameters.environmentName }}
    variables:
    - template: './template-variables.yml'
    - template: './template-variables-${{ parameters.environmentName }}.yml'
    - name: 'terraformBasePath'
      value: '${{ parameters.terraformBasePath }}'
    displayName: 'Deploy Web App'
    jobs:
      - job: DeployWebApp
        displayName: 'Publish Web App'
        steps:
        - checkout: self
          displayName: 'Checkout repository'

        - script: npm ci
          displayName: 'Install dependencies using npm ci'
          workingDirectory: '$(System.DefaultWorkingDirectory)'

        - task: Bash@3
          displayName: 'Build application'
          inputs:
            targetType: 'inline'
            script: 'CI=false npm run build'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            
        - task: CopyFiles@2
          displayName: 'Copy web.config to build folder'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: 'web.config'
            TargetFolder: '$(System.DefaultWorkingDirectory)/build'

        - task: Bash@3
          displayName: 'Create deployment package'
          inputs:
            targetType: 'inline'
            script: |
              echo "Creating package.json for deployment"
              cat > "$(System.DefaultWorkingDirectory)/build/package.json" << EOF
              {
                "name": "vuosikello",
                "version": "1.0.0",
                "scripts": {
                  "start": "node server.js"
                },
                "engines": {
                  "node": "18.x"
                }
              }
              EOF
              
              echo "Creating simple server.js for hosting static files"
              cat > "$(System.DefaultWorkingDirectory)/build/server.js" << EOF
              const express = require('express');
              const path = require('path');
              const app = express();
              const PORT = process.env.PORT || 8080;
              
              // Serve static files
              app.use(express.static(path.join(__dirname)));
              
              // Fallback to index.html for SPA routing
              app.get('*', (req, res) => {
                res.sendFile(path.join(__dirname, 'index.html'));
              });
              
              app.listen(PORT, () => {
                console.log(\`Server is running on port \${PORT}\`);
              });
              EOF
            workingDirectory: '$(System.DefaultWorkingDirectory)'

        - task: AzureCLI@2
          displayName: 'Configure Web App settings'
          inputs:
            azureSubscription: '${{ parameters.serviceconnectionName }}'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Asetetaan käynnistyskomento
              az webapp config set --name $(WEB_APP_NAME) --resource-group $(TF_BACKEND_RG_NAME) --startup-file="pm2 serve /home/site/wwwroot --spa --no-daemon"
              
              # Varmistetaan, että Node.js versio on oikea
              az webapp config appsettings set --name $(WEB_APP_NAME) --resource-group $(TF_BACKEND_RG_NAME) --settings WEBSITE_NODE_DEFAULT_VERSION="~18" SCM_DO_BUILD_DURING_DEPLOYMENT=true

        - task: AzureWebApp@1
          displayName: 'Deploy Web App'
          inputs:
            azureSubscription: '${{ parameters.serviceconnectionName }}'
            appType: 'webAppLinux'
            appName: '$(WEB_APP_NAME)'
            resourceGroupName: '$(TF_BACKEND_RG_NAME)'
            package: '$(System.DefaultWorkingDirectory)/build'
            runtimeStack: 'NODE|18-lts'
            startUpCommand: 'pm2 serve /home/site/wwwroot --spa --no-daemon'
            deploymentMethod: 'auto'